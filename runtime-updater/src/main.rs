use curl::easy::{Easy, List};
use hex;
use parity_scale_codec::{Decode, Encode, HasCompact};
use std::io::{stdout, Read, Write};
//use std::process::Command;
use std::fs::File;
use std::io::prelude::*;

#[derive(Encode, Decode)]
struct AsCompact<T: HasCompact>(#[codec(compact)] T);

const WASM_PATH: &'static str =
	"my-target/release/wbuild/frameless-runtime/frameless_runtime.compact.compressed.wasm";

/*
	const submit_extrinsic: &'static str = "http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   '{
		"jsonrpc":"2.0",
		"id":1,
		"method":"author_submitExtrinsic",
		"params": ["0x0104000000"]
}'
";*/

/*
const GET_STORAGE: &'static str =
	"http://localhost:9933 -H Content-Type:application/json;charset=utf-8 -d  {
		jsonrpc:2.0,
		id:1,
		method:state_getStorage,
		params: [0x616363]
}";
*/

#[derive(Encode, Decode)]
enum Calls {
	SetCode(Vec<u8>),
}

/*
[derive(Encode, Decode)]
	enum Foo {
	Bar(Vec<u8>),
}
*/

fn main() {
	// For getting a new wasm version i have found 2 options so far:
	//     1) read new generated wasm file directly in output directory
	// 	   2) parse json spec file generated by client with:
	//			target/release/node-template build-spec --chain=dev --raw > spec.json
	// Going for option 1
	let raw_code = std::fs::read(WASM_PATH).expect("Where is my wasm file");
	let call = Calls::SetCode(raw_code);
	// 3 options:
	//		1) run curl binaries as a noob
	//		2) use a curl rust crates.
	//		3) use substrate rpc api ?
	let data =  format!("{{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"author_submitExtrinsic\",\"params\": [\"0x{}\"]}}", hex::encode(call.encode()));

	let mut data = data.as_bytes();

	let mut easy = Easy::new();
	easy.url("http://localhost:9933").unwrap();
	let mut list = List::new();
	list.append("Content-Type:application/json").unwrap();
	list.append("charset=utf-8").unwrap();
	easy.http_headers(list).unwrap();
	easy.post(true).unwrap();
	easy.post_field_size(data.len() as u64).unwrap();
	easy.write_function(|data| {
		stdout().write_all(data).unwrap();
		Ok(data.len())
	})
	.unwrap();
	let mut transfer = easy.transfer();
	transfer.read_function(|buf| Ok(data.read(buf).unwrap_or(0))).unwrap();
	transfer.perform().unwrap();
}
